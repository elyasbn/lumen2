generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // change to postgresql/mysql later
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      String   @default("admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  purchases     Purchase[]
  enrollments   Enrollment[]
  workoutPlans  WorkoutPlan[]
  workoutRequests WorkoutRequest[]
}

model Blog {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique
  excerpt     String?
  content     String?
  author      String
  authorId    Int
  publishedAt DateTime
  updatedAt   DateTime
  status      String
  category    String?
  tags        Json?     // was String[]
  readTime    String?
  views       Int      @default(0)
  featured    Boolean  @default(false)
  image       String?
  seo         Json?
}

model Class {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  instructor  String
  instructorId Int
  schedule    String?
  duration    Int?
  capacity    Int?
  enrolled    Int?
  price       Float?
  status      String
  level       String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  enrollments Enrollment[]
}

model Coach {
  id             Int      @id @default(autoincrement())
  name           String
  email          String
  phone          String?
  specialties    Json?     // was String[]
  experience     String?
  rating         Float?
  students       Int?
  status         String
  avatar         String?
  bio            String?
  certifications Json?     // was String[]
  joinedAt       DateTime
  socialMedia    Json?
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique
  date        DateTime
  time        String?
  endTime     String?
  location    String?
  address     String?
  type        String?
  capacity    Int?
  registered  Int?
  price       Float?
  status      String
  featured    Boolean  @default(false)
  description String?
  image       String?
  instructors Json?     // was String[]
  tags        Json?     // was String[]
}

model Product {
  id           Int      @id @default(autoincrement())
  name         String
  slug         String   @unique
  category     String?
  price        Float
  originalPrice Float?
  stock        Int
  sold         Int?
  rating       Float?
  reviewCount  Int?
  status       String
  featured     Boolean  @default(false)
  badge        String?
  image        String?
  images       Json?     // was String[]
  description  String?
  features     Json?     // was String[]
  sizes        Json?     // was String[]
  colors       Json?     // was String[]
  tags         Json?     // was String[]

  purchases    Purchase[]
}

model Purchase {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  productId Int
  product   Product? @relation(fields: [productId], references: [id])
  amount    Float
  createdAt DateTime @default(now())
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  classId   Int
  classRef  Class?   @relation(fields: [classId], references: [id])
  status    String   @default("active")
  createdAt DateTime @default(now())
}

model WorkoutPlan {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  title     String
  details   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkoutRequest {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  goals       String
  experience  String
  preferences String?
  status      String   @default("pending")
  createdAt   DateTime @default(now())
}
